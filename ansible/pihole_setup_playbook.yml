---

- name: Configure the Pihole
  hosts: pihole
  become: yes

  tasks:

  - name: Ensure prometheus user exists
    user:
      name: prometheus
      shell: /bin/false

  - name: Download Node exporter
    get_url:
      url: https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-armv7.tar.gz
      dest: /tmp
      checksum: sha256:e7f4427a25f1870103588e4968c7dc8c1426c00a0c029d0183a9a7afdd61357b

  - name: Create Node exporter folder in /usr/bin
    become: yes
    file:
      path: /usr/bin/nodeexporter
      state: directory
      owner: prometheus
      group: prometheus
      mode: '0777'

  - name: Extract Node exporter
    become: yes
    unarchive:
       src: /tmp/node_exporter-1.0.1.linux-armv7.tar.gz
       dest: /usr/bin/nodeexporter
       remote_src: yes

  - name: Copy Node exporter Service File from local machine
    copy:
        src: node_exporter/nodeexporter.service
        dest: /etc/systemd/system/nodeexporter.service

  - name: systemd reload
    become: yes
    systemd:
      daemon_reload: yes

  - name: Start Node exporter service
    become: yes
    service:
      name: nodeexporter
      enabled: yes
      state: started

  - name: Install docker dependencies
    apt:
      force_apt_get: yes
      name:
        - gnupg2
        - software-properties-common

  - name: Add Docker apt key
    apt_key:
      url: https://download.docker.com/linux/raspbian/gpg
      id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

  - name: Add Docker apt repository
    apt_repository:
      repo: deb [arch=armhf] https://download.docker.com/linux/raspbian buster stable
      filename: docker

  - name: Install Docker
    apt:
      force_apt_get: yes
      name:
        - docker-ce
        - python-setuptools
        - python3-pip
      install_recommends: no

  - name: Install Docker SDK for python
    pip:
      name: docker

  - name: Add user to docker group
    user:
      name: homelab
      append: yes
      groups: docker

  - name: Create pihole directory
    file:
      path: "/home/homelab/pihole"
      owner: homelab
      group: homelab
      state: directory
      mode: 0755

  - name: Create grafana directory
    file:
      path: "/home/homelab/grafana"
      owner: "472" # this is to enable the container
      group: "472" # to access the data dir
      state: directory
      mode: 0755

  - name: Create 2nd pihole directory
    file:
      path: "/home/homelab/pihole/pihole"
      state: directory
      mode: 0775

  - name: Create FTL config
    blockinfile:
      path: "/home/homelab/pihole/pihole/pihole-FTL.conf"
      create: yes
      block: MAXDBDAYS=180
      mode: 0644

  - name: Set ServerIP addresses (single mode)
    set_fact:
      server_ip: "192.168.1.4"
      execution_mode: "single node setup"

  - name: Start/Update pihole container
    docker_container:
      name: pihole
      image: "pihole/pihole:2021.10.1"
      pull: yes
      auto_remove: no
      restart_policy: unless-stopped
      env:
        TZ: "Europe/London"
        ServerIP: "{{ server_ip }}"
        WEBPASSWORD: "CHANGE_ME"
        PIHOLE_DNS_: "1.1.1.1;2606:4700:4700::1111"
        DNSMASQ_LISTENING: "local"
        REV_SERVER: "false"
      dns_servers:
        - 127.0.0.1
        - 1.1.1.1
      network_mode: host
      volumes:
        - "/home/homelab/pihole/pihole/:/etc/pihole/"
        - "/home/homelab/pihole/dnsmasq.d/:/etc/dnsmasq.d/"
      log_driver: json-file
      log_options:
        max-size: "10m"
        max-file: "5"

  - name: Check pihole container
    uri:
      url: http://localhost
    register: result
    until: result.status == 200
    retries: 5
    delay: 10

  - name: Remove old image versions
    docker_prune:
      images: yes
      images_filters:
        dangling: false

  - name: Start grafana container
    docker_container:
      name: grafana
      image: "grafana/grafana:latest"
      pull: yes
      restart_policy: unless-stopped
      auto_remove: no
      network_mode: host
      volumes:
        - /home/homelab/grafana/data:/var/lib/grafana # data path
      log_driver: json-file
      log_options:
        max-size: "10m"
        max-file: "5"

  handlers:

  - name: Restart ssh
    action: service name=ssh state=restarted
